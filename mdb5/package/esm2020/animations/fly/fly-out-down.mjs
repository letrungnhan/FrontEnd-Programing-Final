import { animate, keyframes, style, transition, trigger, animation, useAnimation, } from '@angular/animations';
import { getOptions } from '../animations.utils';
const flyOutDownOptions = {
    trigger: 'flyOutDown',
    delay: 0,
    duration: 500,
};
const flyOutDownLeaveOptions = {
    trigger: 'flyOutDownLeave',
    delay: 0,
    duration: 500,
};
const flyOutDown = (options) => {
    const params = {
        delay: options.delay,
        duration: options.duration,
    };
    return animation([
        animate('{{duration}}ms {{delay}}ms', keyframes([
            style({
                transform: 'translate3d(0, -10px, 0)',
                easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)',
                offset: 0.2,
            }),
            style({
                transform: 'transform: translate3d(0, 20px, 0)',
                easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)',
                offset: 0.4,
            }),
            style({
                transform: 'transform: translate3d(0, 20px, 0)',
                easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)',
                offset: 0.45,
            }),
            style({
                opacity: 1,
                transform: 'transform: translate3d(0, -2000px, 0)',
                easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)',
                offset: 1,
            }),
        ])),
    ], { params });
};
export function flyOutDownAnimation(options) {
    options = getOptions(options, flyOutDownOptions);
    return trigger(options.trigger, [transition('0 => 1', [useAnimation(flyOutDown(options))])]);
}
export function flyOutDownLeaveAnimation(options) {
    options = getOptions(options, flyOutDownLeaveOptions);
    return trigger(options.trigger, [transition(':leave', [useAnimation(flyOutDown(options))])]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmx5LW91dC1kb3duLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbWRiLWFuZ3VsYXItdWkta2l0L2FuaW1hdGlvbnMvZmx5L2ZseS1vdXQtZG93bi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsT0FBTyxFQUVQLFNBQVMsRUFDVCxLQUFLLEVBQ0wsVUFBVSxFQUNWLE9BQU8sRUFDUCxTQUFTLEVBQ1QsWUFBWSxHQUViLE1BQU0scUJBQXFCLENBQUM7QUFFN0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWpELE1BQU0saUJBQWlCLEdBQXdCO0lBQzdDLE9BQU8sRUFBRSxZQUFZO0lBQ3JCLEtBQUssRUFBRSxDQUFDO0lBQ1IsUUFBUSxFQUFFLEdBQUc7Q0FDZCxDQUFDO0FBRUYsTUFBTSxzQkFBc0IsR0FBd0I7SUFDbEQsT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixLQUFLLEVBQUUsQ0FBQztJQUNSLFFBQVEsRUFBRSxHQUFHO0NBQ2QsQ0FBQztBQUVGLE1BQU0sVUFBVSxHQUFHLENBQUMsT0FBNEIsRUFBOEIsRUFBRTtJQUM5RSxNQUFNLE1BQU0sR0FBRztRQUNiLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztRQUNwQixRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7S0FDM0IsQ0FBQztJQUVGLE9BQU8sU0FBUyxDQUNkO1FBQ0UsT0FBTyxDQUNMLDRCQUE0QixFQUM1QixTQUFTLENBQUM7WUFDUixLQUFLLENBQUM7Z0JBQ0osU0FBUyxFQUFFLDBCQUEwQjtnQkFDckMsTUFBTSxFQUFFLHFDQUFxQztnQkFDN0MsTUFBTSxFQUFFLEdBQUc7YUFDWixDQUFDO1lBQ0YsS0FBSyxDQUFDO2dCQUNKLFNBQVMsRUFBRSxvQ0FBb0M7Z0JBQy9DLE1BQU0sRUFBRSxxQ0FBcUM7Z0JBQzdDLE1BQU0sRUFBRSxHQUFHO2FBQ1osQ0FBQztZQUNGLEtBQUssQ0FBQztnQkFDSixTQUFTLEVBQUUsb0NBQW9DO2dCQUMvQyxNQUFNLEVBQUUscUNBQXFDO2dCQUM3QyxNQUFNLEVBQUUsSUFBSTthQUNiLENBQUM7WUFDRixLQUFLLENBQUM7Z0JBQ0osT0FBTyxFQUFFLENBQUM7Z0JBQ1YsU0FBUyxFQUFFLHVDQUF1QztnQkFDbEQsTUFBTSxFQUFFLHFDQUFxQztnQkFDN0MsTUFBTSxFQUFFLENBQUM7YUFDVixDQUFDO1NBQ0gsQ0FBQyxDQUNIO0tBQ0YsRUFDRCxFQUFFLE1BQU0sRUFBRSxDQUNYLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLFVBQVUsbUJBQW1CLENBQUMsT0FBNkI7SUFDL0QsT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUVqRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9GLENBQUM7QUFFRCxNQUFNLFVBQVUsd0JBQXdCLENBQUMsT0FBNkI7SUFDcEUsT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztJQUV0RCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9GLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBhbmltYXRlLFxuICBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEsXG4gIGtleWZyYW1lcyxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb24sXG4gIHRyaWdnZXIsXG4gIGFuaW1hdGlvbixcbiAgdXNlQW5pbWF0aW9uLFxuICBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSxcbn0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBNZGJBbmltYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vYW5pbWF0aW9uLm9wdGlvbnMnO1xuaW1wb3J0IHsgZ2V0T3B0aW9ucyB9IGZyb20gJy4uL2FuaW1hdGlvbnMudXRpbHMnO1xuXG5jb25zdCBmbHlPdXREb3duT3B0aW9uczogTWRiQW5pbWF0aW9uT3B0aW9ucyA9IHtcbiAgdHJpZ2dlcjogJ2ZseU91dERvd24nLFxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDUwMCxcbn07XG5cbmNvbnN0IGZseU91dERvd25MZWF2ZU9wdGlvbnM6IE1kYkFuaW1hdGlvbk9wdGlvbnMgPSB7XG4gIHRyaWdnZXI6ICdmbHlPdXREb3duTGVhdmUnLFxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDUwMCxcbn07XG5cbmNvbnN0IGZseU91dERvd24gPSAob3B0aW9uczogTWRiQW5pbWF0aW9uT3B0aW9ucyk6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0+IHtcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGRlbGF5OiBvcHRpb25zLmRlbGF5LFxuICAgIGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuICB9O1xuXG4gIHJldHVybiBhbmltYXRpb24oXG4gICAgW1xuICAgICAgYW5pbWF0ZShcbiAgICAgICAgJ3t7ZHVyYXRpb259fW1zIHt7ZGVsYXl9fW1zJyxcbiAgICAgICAga2V5ZnJhbWVzKFtcbiAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCAtMTBweCwgMCknLFxuICAgICAgICAgICAgZWFzaW5nOiAnY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSknLFxuICAgICAgICAgICAgb2Zmc2V0OiAwLjIsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAyMHB4LCAwKScsXG4gICAgICAgICAgICBlYXNpbmc6ICdjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKScsXG4gICAgICAgICAgICBvZmZzZXQ6IDAuNCxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDIwcHgsIDApJyxcbiAgICAgICAgICAgIGVhc2luZzogJ2N1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpJyxcbiAgICAgICAgICAgIG9mZnNldDogMC40NSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMjAwMHB4LCAwKScsXG4gICAgICAgICAgICBlYXNpbmc6ICdjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKScsXG4gICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgfSksXG4gICAgICAgIF0pXG4gICAgICApLFxuICAgIF0sXG4gICAgeyBwYXJhbXMgfVxuICApO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGZseU91dERvd25BbmltYXRpb24ob3B0aW9ucz86IE1kYkFuaW1hdGlvbk9wdGlvbnMpOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEge1xuICBvcHRpb25zID0gZ2V0T3B0aW9ucyhvcHRpb25zLCBmbHlPdXREb3duT3B0aW9ucyk7XG5cbiAgcmV0dXJuIHRyaWdnZXIob3B0aW9ucy50cmlnZ2VyLCBbdHJhbnNpdGlvbignMCA9PiAxJywgW3VzZUFuaW1hdGlvbihmbHlPdXREb3duKG9wdGlvbnMpKV0pXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbHlPdXREb3duTGVhdmVBbmltYXRpb24ob3B0aW9ucz86IE1kYkFuaW1hdGlvbk9wdGlvbnMpOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEge1xuICBvcHRpb25zID0gZ2V0T3B0aW9ucyhvcHRpb25zLCBmbHlPdXREb3duTGVhdmVPcHRpb25zKTtcblxuICByZXR1cm4gdHJpZ2dlcihvcHRpb25zLnRyaWdnZXIsIFt0cmFuc2l0aW9uKCc6bGVhdmUnLCBbdXNlQW5pbWF0aW9uKGZseU91dERvd24ob3B0aW9ucykpXSldKTtcbn1cbiJdfQ==