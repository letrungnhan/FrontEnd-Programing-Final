{"version":3,"file":"mdb-angular-ui-kit-notification.mjs","sources":["../../../projects/mdb-angular-ui-kit/notification/notification.config.ts","../../../projects/mdb-angular-ui-kit/notification/notification-ref.ts","../../../projects/mdb-angular-ui-kit/notification/notification-container.component.ts","../../../projects/mdb-angular-ui-kit/notification/notification-container.component.html","../../../projects/mdb-angular-ui-kit/notification/notification.service.ts","../../../projects/mdb-angular-ui-kit/notification/notification.module.ts","../../../projects/mdb-angular-ui-kit/notification/mdb-angular-ui-kit-notification.ts"],"sourcesContent":["import { ViewContainerRef } from '@angular/core';\n\n/* eslint-disable @typescript-eslint/no-inferrable-types */\nexport class MdbNotificationConfig<D = any> {\n  position?:\n    | 'top-center'\n    | 'bottom-center'\n    | 'top-left'\n    | 'top-right'\n    | 'bottom-left'\n    | 'bottom-right' = 'top-right';\n  width?: string = 'unset';\n  delay?: number = 5000;\n  autohide?: boolean = false;\n  stacking?: boolean = false;\n  offset?: number = 10;\n  animation?: boolean = true;\n  viewContainerRef?: ViewContainerRef;\n  data?: D | null = null;\n}\n","import { OverlayRef } from '@angular/cdk/overlay';\nimport { Observable, Subject } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { MdbNotificationContainerComponent } from '.';\nimport { MdbNotificationService } from './notification.service';\nexport class MdbNotificationRef<T> {\n  constructor(\n    public overlayRef: OverlayRef,\n    private _notificationService: MdbNotificationService,\n    private _container: MdbNotificationContainerComponent\n  ) {}\n\n  private readonly onClose$: Subject<any> = new Subject();\n  readonly onClose: Observable<any> = this.onClose$.asObservable();\n\n  close(message?: any): void {\n    this.onClose$.next(message);\n    this.onClose$.complete();\n\n    this._container._hidden.pipe(first()).subscribe(() => {\n      this._notificationService.updateToast(this);\n      this.overlayRef.detach();\n      this.overlayRef.dispose();\n    });\n\n    this._container.animationState = 'hidden';\n  }\n\n  getPosition(): DOMRect {\n    const overlayPosition = this.overlayRef.overlayElement;\n\n    if (overlayPosition) {\n      return overlayPosition.getBoundingClientRect();\n    } else {\n      return new DOMRect();\n    }\n  }\n}\n","import { CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  Inject,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MdbNotificationConfig } from './notification.config';\nimport { animate, state, style, transition, trigger, AnimationEvent } from '@angular/animations';\nimport { DOCUMENT } from '@angular/common';\n\n@Component({\n  selector: 'mdb-notification-container',\n  templateUrl: 'notification-container.component.html',\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [\n    trigger('fade', [\n      state('visible', style({ opacity: 1 })),\n      state('hidden', style({ opacity: 0 })),\n      transition('visible => hidden', animate('150ms linear')),\n      transition(':enter', [style({ opacity: 0 }), animate('150ms linear')]),\n    ]),\n  ],\n})\nexport class MdbNotificationContainerComponent implements OnInit, OnDestroy {\n  @ViewChild(CdkPortalOutlet, { static: true }) _portalOutlet: CdkPortalOutlet;\n\n  readonly _destroy$: Subject<void> = new Subject<void>();\n  readonly _hidden: Subject<void> = new Subject<void>();\n\n  animationState = 'visible';\n\n  _config: MdbNotificationConfig;\n\n  constructor(\n    @Inject(DOCUMENT) private _document,\n    public _elementRef: ElementRef,\n    private _renderer: Renderer2,\n    private _cdRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this._renderer.addClass(this._document.body, 'notification-open');\n  }\n\n  ngOnDestroy(): void {\n    this._renderer.removeClass(this._document.body, 'notification-open');\n  }\n\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  detectChanges(): void {\n    this._cdRef.detectChanges();\n  }\n\n  onAnimationEnd(event: AnimationEvent): void {\n    if (event.toState === 'hidden') {\n      this._hidden.next();\n    }\n  }\n}\n","<div   \n  [@fade]=\"animationState\"\n  (@fade.done)=\"onAnimationEnd($event)\"\n>\n  <ng-template cdkPortalOutlet></ng-template>\n</div>\n","import {\n  ComponentType,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n} from '@angular/cdk/overlay';\nimport {\n  ComponentFactoryResolver,\n  Injectable,\n  Injector,\n  StaticProvider,\n  TemplateRef,\n} from '@angular/core';\nimport { MdbNotificationConfig } from './notification.config';\nimport { MdbNotificationRef } from './notification-ref';\nimport { MdbNotificationContainerComponent } from './notification-container.component';\nimport { ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { first } from 'rxjs/operators';\n\n@Injectable()\nexport class MdbNotificationService {\n  timeout: any;\n  toasts: MdbNotificationRef<[]>[] = [];\n  config: MdbNotificationConfig;\n\n  constructor(\n    private _overlay: Overlay,\n    private _injector: Injector,\n    private _cfr: ComponentFactoryResolver\n  ) {}\n\n  open<T, D = any>(\n    componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n    newConfig?: MdbNotificationConfig<D>\n  ): MdbNotificationRef<T> {\n    const defaultConfig = new MdbNotificationConfig();\n    this.config = newConfig ? Object.assign(defaultConfig, newConfig) : defaultConfig;\n\n    const overlayRef = this._createOverlay(this.config);\n    const container = this._createContainer(overlayRef, this.config);\n    const toastRef = this._createContent(\n      componentOrTemplateRef,\n      container,\n      overlayRef,\n      this.config\n    );\n\n    if (this.config.stacking) {\n      this.toasts.push(toastRef);\n    }\n\n    if (this.config.autohide) {\n      this.timeout = setTimeout(() => {\n        container._hidden.pipe(first()).subscribe(() => {\n          if (this.config.stacking) {\n            this.updateToast(toastRef);\n          }\n          overlayRef.detach();\n          overlayRef.dispose();\n        });\n\n        container.animationState = 'hidden';\n        container.detectChanges();\n      }, this.config.delay);\n    }\n\n    return toastRef;\n  }\n\n  updateToast(toastRef): void {\n    const toastIndex = this.toasts.indexOf(toastRef);\n    this.toasts.splice(toastIndex, 1);\n\n    this.toasts.forEach((toast, index) => {\n      toast.overlayRef.updatePositionStrategy(this._getPositionStrategy(this.config, index - 1));\n    });\n  }\n\n  private _createOverlay(config: MdbNotificationConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n  private _setOffset(config: MdbNotificationConfig, index?: number): number {\n    const verticalDirection = config.position.startsWith('top') ? 'bottom' : 'top';\n    const shouldCalculateFromTop = verticalDirection === 'top' ? false : true;\n    const calculationAdjustment = shouldCalculateFromTop ? 0 : window.innerHeight;\n\n    if (this.toasts.length === 0 || index <= -1) {\n      return config.offset;\n    } else if (index || index === 0) {\n      return Math.abs(calculationAdjustment - this.toasts[index].getPosition()[verticalDirection]);\n    } else {\n      return Math.abs(\n        calculationAdjustment - this.toasts[this.toasts.length - 1].getPosition()[verticalDirection]\n      );\n    }\n  }\n\n  private _getOverlayConfig(notificationConfig: MdbNotificationConfig): OverlayConfig {\n    const width = notificationConfig.width;\n\n    const config = new OverlayConfig({\n      positionStrategy: this._getPositionStrategy(notificationConfig),\n      scrollStrategy: this._overlay.scrollStrategies.reposition(),\n      hasBackdrop: false,\n      height: 'fit-content',\n      width,\n    });\n\n    return config;\n  }\n\n  private _getPositionStrategy(\n    notificationConfig: MdbNotificationConfig,\n    index?: number\n  ): PositionStrategy {\n    const offset = `${this._setOffset(notificationConfig, index)}px`;\n    let positionStrategy;\n\n    switch (notificationConfig.position) {\n      case 'top-left':\n        positionStrategy = this._overlay\n          .position()\n          .global()\n          .top(offset)\n          .left(`${notificationConfig.offset}px`);\n        break;\n      case 'bottom-left':\n        positionStrategy = this._overlay\n          .position()\n          .global()\n          .bottom(offset)\n          .left(`${notificationConfig.offset}px`);\n        break;\n      case 'bottom-right':\n        positionStrategy = this._overlay\n          .position()\n          .global()\n          .bottom(offset)\n          .right(`${notificationConfig.offset}px`);\n        break;\n      case 'bottom-center':\n        positionStrategy = this._overlay.position().global().bottom(offset).centerHorizontally();\n        break;\n      case 'top-center':\n        positionStrategy = this._overlay.position().global().top(offset).centerHorizontally();\n        break;\n      default:\n        positionStrategy = this._overlay\n          .position()\n          .global()\n          .top(offset)\n          .right(`${notificationConfig.offset}px`);\n        break;\n    }\n\n    return positionStrategy;\n  }\n\n  private _createContainer(\n    overlayRef: OverlayRef,\n    config: MdbNotificationConfig\n  ): MdbNotificationContainerComponent {\n    const portal = new ComponentPortal(\n      MdbNotificationContainerComponent,\n      null,\n      this._injector,\n      this._cfr\n    );\n    const containerRef = overlayRef.attach(portal);\n    containerRef.instance._config = config;\n    return containerRef.instance;\n  }\n\n  private _createContent<T>(\n    componentOrTemplate: ComponentType<T> | TemplateRef<T>,\n    container: MdbNotificationContainerComponent,\n    overlayRef: OverlayRef,\n    config: MdbNotificationConfig\n  ): MdbNotificationRef<T> {\n    const notificationRef = new MdbNotificationRef(overlayRef, this, container);\n\n    if (componentOrTemplate instanceof TemplateRef) {\n      container.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplate, null, {\n          $implicit: config.data,\n          notificationRef,\n        } as any)\n      );\n    } else {\n      const injector = this._createInjector<T>(config, notificationRef, container);\n      const contentRef = container.attachComponentPortal<T>(\n        new ComponentPortal(componentOrTemplate, config.viewContainerRef, injector)\n      );\n\n      if (config.data) {\n        Object.assign(contentRef.instance, { ...config.data });\n      }\n    }\n\n    return notificationRef;\n  }\n\n  private _createInjector<T>(\n    config: MdbNotificationConfig,\n    notificationRef: MdbNotificationRef<T>,\n    container: MdbNotificationContainerComponent\n  ): Injector {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const providers: StaticProvider[] = [\n      { provide: MdbNotificationContainerComponent, useValue: container },\n      { provide: MdbNotificationRef, useValue: notificationRef },\n    ];\n\n    return Injector.create({ parent: userInjector || this._injector, providers });\n  }\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { NgModule } from '@angular/core';\nimport { MdbNotificationContainerComponent } from './notification-container.component';\nimport { MdbNotificationService } from './notification.service';\n\n@NgModule({\n  imports: [OverlayModule, PortalModule],\n  exports: [MdbNotificationContainerComponent],\n  declarations: [MdbNotificationContainerComponent],\n  providers: [MdbNotificationService],\n})\nexport class MdbNotificationModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i1"],"mappings":"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"}