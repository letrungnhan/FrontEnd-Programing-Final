import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, QueryList, Renderer2 } from '@angular/core';
import { MdbSidenavLayoutComponent } from './sidenav-loyaut.component';
import { MdbCollapseDirective } from 'mdb-angular-ui-kit/collapse';
import { ConfigurableFocusTrapFactory } from '@angular/cdk/a11y';
import { BooleanInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export declare class MdbSidenavComponent implements AfterViewInit {
    private _renderer;
    private _elRef;
    private _cdRef;
    private _focusTrapFactory;
    _sidenav: ElementRef<HTMLElement>;
    _collapse: QueryList<MdbCollapseDirective>;
    get accordion(): boolean;
    set accordion(newValue: boolean);
    get backdrop(): boolean;
    set backdrop(newValue: boolean);
    get backdropClass(): string;
    set backdropClass(newValue: string);
    get closeOnEsc(): boolean;
    set closeOnEsc(newValue: boolean);
    get color(): string;
    set color(newValue: string);
    get expandOnHover(): boolean;
    set expandOnHover(newValue: boolean);
    get hidden(): boolean;
    set hidden(newValue: boolean);
    get mode(): string;
    set mode(newValue: string);
    get scrollContainer(): string;
    set scrollContainer(newValue: string);
    get slim(): boolean;
    set slim(newValue: boolean);
    get slimCollapsed(): boolean;
    set slimCollapsed(newValue: boolean);
    get slimWidth(): number;
    set slimWidth(newValue: number);
    get position(): string;
    set position(newValue: string);
    get right(): boolean;
    set right(newValue: boolean);
    get transitionDuration(): number;
    set transitionDuration(newValue: number);
    get width(): number;
    set width(newValue: number);
    get focusTrap(): boolean;
    set focusTrap(newValue: boolean);
    sidenavShow: EventEmitter<MdbSidenavComponent>;
    sidenavShown: EventEmitter<MdbSidenavComponent>;
    sidenavHide: EventEmitter<MdbSidenavComponent>;
    sidenavHidden: EventEmitter<MdbSidenavComponent>;
    sidenavExpand: EventEmitter<MdbSidenavComponent>;
    sidenavExpanded: EventEmitter<MdbSidenavComponent>;
    sidenavCollapse: EventEmitter<MdbSidenavComponent>;
    sidenavCollapsed: EventEmitter<MdbSidenavComponent>;
    sidenavUpdate: EventEmitter<MdbSidenavComponent>;
    private _color;
    private _accordion;
    private _backdrop;
    private _backdropClass;
    private _closeOnEsc;
    private _expandOnHover;
    private _hidden;
    private _mode;
    private _scrollContainer;
    private _slim;
    private _slimCollapsed;
    private _slimWidth;
    private _position;
    private _right;
    private _transitionDuration;
    private _width;
    private _focusTrap;
    private translationLeft;
    private translationRight;
    private _isLoaded;
    private _contentEl;
    private _initialContentStyle;
    private document;
    isOpen: boolean;
    sidenavLayout: MdbSidenavLayoutComponent;
    private _configurableFocusTrap;
    constructor(_renderer: Renderer2, _elRef: ElementRef, _cdRef: ChangeDetectorRef, _focusTrapFactory: ConfigurableFocusTrapFactory, _container: MdbSidenavLayoutComponent, _document: any);
    ngAfterViewInit(): void;
    get container(): HTMLElement;
    get translation(): number;
    get sidenavTransitionDuration(): string;
    get isVisible(): boolean;
    get sidenavWidth(): number;
    get sidenavStyle(): object;
    get isAllCollapsed(): boolean;
    isTheLastItemToBeCollapsed(): boolean;
    markForCheck(): void;
    toggle(): void;
    show(): void;
    hide(): void;
    update(): void;
    setMode(newMode: string): void;
    toggleSlim(): void;
    triggerEvents(startEvent: string, completeEvent?: string): Promise<void>;
    triggetVisibilityEvents(show: boolean): void;
    updateSidenav(show: boolean): void;
    collapseItems(): void;
    closeOtherCollapseItems(activeCollapse: MdbCollapseDirective): void;
    setSlim(value: boolean): void;
    private _setup;
    private _setupContent;
    private _updateDisplay;
    private _setupInitialStyling;
    private _setColor;
    private _updateOffsets;
    private _setupSlim;
    private _toggleSlimDisplay;
    private _setupScrolling;
    private _setContentOffsets;
    private _getOffsetValue;
    private _getPxValue;
    private _getProperty;
    static ngAcceptInputType_accordion: BooleanInput;
    static ngAcceptInputType_backdrop: BooleanInput;
    static ngAcceptInputType_closeOnEsc: BooleanInput;
    static ngAcceptInputType_expandOnHover: BooleanInput;
    static ngAcceptInputType_hidden: BooleanInput;
    static ngAcceptInputType_slim: BooleanInput;
    static ngAcceptInputType_slimCollapsed: BooleanInput;
    static ngAcceptInputType_right: BooleanInput;
    static ngAcceptInputType_focusTrap: BooleanInput;
    static ɵfac: i0.ɵɵFactoryDeclaration<MdbSidenavComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MdbSidenavComponent, "mdb-sidenav", ["mdbSidenav"], { "accordion": "accordion"; "backdrop": "backdrop"; "backdropClass": "backdropClass"; "closeOnEsc": "closeOnEsc"; "color": "color"; "expandOnHover": "expandOnHover"; "hidden": "hidden"; "mode": "mode"; "scrollContainer": "scrollContainer"; "slim": "slim"; "slimCollapsed": "slimCollapsed"; "slimWidth": "slimWidth"; "position": "position"; "right": "right"; "transitionDuration": "transitionDuration"; "width": "width"; "focusTrap": "focusTrap"; }, { "sidenavShow": "sidenavShow"; "sidenavShown": "sidenavShown"; "sidenavHide": "sidenavHide"; "sidenavHidden": "sidenavHidden"; "sidenavExpand": "sidenavExpand"; "sidenavExpanded": "sidenavExpanded"; "sidenavCollapse": "sidenavCollapse"; "sidenavCollapsed": "sidenavCollapsed"; "sidenavUpdate": "sidenavUpdate"; }, ["_collapse"], ["*"]>;
}
