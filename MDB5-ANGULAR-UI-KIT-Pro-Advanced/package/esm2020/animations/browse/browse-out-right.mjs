import { animate, keyframes, style, transition, trigger, animation, useAnimation, } from '@angular/animations';
import { getOptions } from '../animations.utils';
const browseOutRightOptions = {
    trigger: 'browseOutRight',
    delay: 0,
    duration: 500,
};
const browseOutRightLeaveOptions = {
    trigger: 'browseOutRightLeave',
    delay: 0,
    duration: 500,
};
const browseOutRight = (options) => {
    const params = {
        delay: options.delay,
        duration: options.duration,
    };
    return animation([
        animate('{{duration}}ms {{delay}}ms', keyframes([
            style({
                transform: 'transform: translateX(0%) rotateY(0deg) rotateX(0deg)',
                zIndex: 999,
                easing: 'ease',
                offset: 0,
            }),
            style({
                transform: 'transform: translateX(-105%) rotateY(35deg) rotateX(10deg) translateZ(-10px)',
                zIndex: -1,
                easing: 'ease',
                offset: 0.5,
            }),
            style({
                opacity: 1,
                offset: 0.8,
            }),
            style({
                transform: 'translateX(0%) rotateY(0deg) rotateX(0deg) translateZ(-10px);',
                zIndex: -1,
                opacity: 0,
                easing: 'ease',
                offset: 1,
            }),
        ])),
    ], { params });
};
export function browseOutRightAnimation(options) {
    options = getOptions(options, browseOutRightOptions);
    return trigger(options.trigger, [transition('0 => 1', [useAnimation(browseOutRight(options))])]);
}
export function browseOutRightLeaveAnimation(options) {
    options = getOptions(options, browseOutRightLeaveOptions);
    return trigger(options.trigger, [transition(':leave', [useAnimation(browseOutRight(options))])]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3NlLW91dC1yaWdodC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL21kYi1hbmd1bGFyLXVpLWtpdC9hbmltYXRpb25zL2Jyb3dzZS9icm93c2Utb3V0LXJpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxPQUFPLEVBRVAsU0FBUyxFQUNULEtBQUssRUFDTCxVQUFVLEVBQ1YsT0FBTyxFQUNQLFNBQVMsRUFDVCxZQUFZLEdBRWIsTUFBTSxxQkFBcUIsQ0FBQztBQUU3QixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFakQsTUFBTSxxQkFBcUIsR0FBd0I7SUFDakQsT0FBTyxFQUFFLGdCQUFnQjtJQUN6QixLQUFLLEVBQUUsQ0FBQztJQUNSLFFBQVEsRUFBRSxHQUFHO0NBQ2QsQ0FBQztBQUVGLE1BQU0sMEJBQTBCLEdBQXdCO0lBQ3RELE9BQU8sRUFBRSxxQkFBcUI7SUFDOUIsS0FBSyxFQUFFLENBQUM7SUFDUixRQUFRLEVBQUUsR0FBRztDQUNkLENBQUM7QUFFRixNQUFNLGNBQWMsR0FBRyxDQUFDLE9BQTRCLEVBQThCLEVBQUU7SUFDbEYsTUFBTSxNQUFNLEdBQUc7UUFDYixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7UUFDcEIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO0tBQzNCLENBQUM7SUFFRixPQUFPLFNBQVMsQ0FDZDtRQUNFLE9BQU8sQ0FDTCw0QkFBNEIsRUFDNUIsU0FBUyxDQUFDO1lBQ1IsS0FBSyxDQUFDO2dCQUNKLFNBQVMsRUFBRSx1REFBdUQ7Z0JBQ2xFLE1BQU0sRUFBRSxHQUFHO2dCQUNYLE1BQU0sRUFBRSxNQUFNO2dCQUNkLE1BQU0sRUFBRSxDQUFDO2FBQ1YsQ0FBQztZQUNGLEtBQUssQ0FBQztnQkFDSixTQUFTLEVBQ1AsOEVBQThFO2dCQUNoRixNQUFNLEVBQUUsQ0FBQyxDQUFDO2dCQUNWLE1BQU0sRUFBRSxNQUFNO2dCQUNkLE1BQU0sRUFBRSxHQUFHO2FBQ1osQ0FBQztZQUNGLEtBQUssQ0FBQztnQkFDSixPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsR0FBRzthQUNaLENBQUM7WUFDRixLQUFLLENBQUM7Z0JBQ0osU0FBUyxFQUFFLCtEQUErRDtnQkFDMUUsTUFBTSxFQUFFLENBQUMsQ0FBQztnQkFDVixPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsTUFBTTtnQkFDZCxNQUFNLEVBQUUsQ0FBQzthQUNWLENBQUM7U0FDSCxDQUFDLENBQ0g7S0FDRixFQUNELEVBQUUsTUFBTSxFQUFFLENBQ1gsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxPQUE2QjtJQUNuRSxPQUFPLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0lBRXJELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkcsQ0FBQztBQUVELE1BQU0sVUFBVSw0QkFBNEIsQ0FDMUMsT0FBNkI7SUFFN0IsT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztJQUUxRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25HLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBhbmltYXRlLFxuICBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEsXG4gIGtleWZyYW1lcyxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb24sXG4gIHRyaWdnZXIsXG4gIGFuaW1hdGlvbixcbiAgdXNlQW5pbWF0aW9uLFxuICBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSxcbn0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBNZGJBbmltYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vYW5pbWF0aW9uLm9wdGlvbnMnO1xuaW1wb3J0IHsgZ2V0T3B0aW9ucyB9IGZyb20gJy4uL2FuaW1hdGlvbnMudXRpbHMnO1xuXG5jb25zdCBicm93c2VPdXRSaWdodE9wdGlvbnM6IE1kYkFuaW1hdGlvbk9wdGlvbnMgPSB7XG4gIHRyaWdnZXI6ICdicm93c2VPdXRSaWdodCcsXG4gIGRlbGF5OiAwLFxuICBkdXJhdGlvbjogNTAwLFxufTtcblxuY29uc3QgYnJvd3NlT3V0UmlnaHRMZWF2ZU9wdGlvbnM6IE1kYkFuaW1hdGlvbk9wdGlvbnMgPSB7XG4gIHRyaWdnZXI6ICdicm93c2VPdXRSaWdodExlYXZlJyxcbiAgZGVsYXk6IDAsXG4gIGR1cmF0aW9uOiA1MDAsXG59O1xuXG5jb25zdCBicm93c2VPdXRSaWdodCA9IChvcHRpb25zOiBNZGJBbmltYXRpb25PcHRpb25zKTogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPT4ge1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgZGVsYXk6IG9wdGlvbnMuZGVsYXksXG4gICAgZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG4gIH07XG5cbiAgcmV0dXJuIGFuaW1hdGlvbihcbiAgICBbXG4gICAgICBhbmltYXRlKFxuICAgICAgICAne3tkdXJhdGlvbn19bXMge3tkZWxheX19bXMnLFxuICAgICAgICBrZXlmcmFtZXMoW1xuICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zZm9ybTogdHJhbnNsYXRlWCgwJSkgcm90YXRlWSgwZGVnKSByb3RhdGVYKDBkZWcpJyxcbiAgICAgICAgICAgIHpJbmRleDogOTk5LFxuICAgICAgICAgICAgZWFzaW5nOiAnZWFzZScsXG4gICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgdHJhbnNmb3JtOlxuICAgICAgICAgICAgICAndHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDUlKSByb3RhdGVZKDM1ZGVnKSByb3RhdGVYKDEwZGVnKSB0cmFuc2xhdGVaKC0xMHB4KScsXG4gICAgICAgICAgICB6SW5kZXg6IC0xLFxuICAgICAgICAgICAgZWFzaW5nOiAnZWFzZScsXG4gICAgICAgICAgICBvZmZzZXQ6IDAuNSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgb2Zmc2V0OiAwLjgsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgwJSkgcm90YXRlWSgwZGVnKSByb3RhdGVYKDBkZWcpIHRyYW5zbGF0ZVooLTEwcHgpOycsXG4gICAgICAgICAgICB6SW5kZXg6IC0xLFxuICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgIGVhc2luZzogJ2Vhc2UnLFxuICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgIH0pLFxuICAgICAgICBdKVxuICAgICAgKSxcbiAgICBdLFxuICAgIHsgcGFyYW1zIH1cbiAgKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBicm93c2VPdXRSaWdodEFuaW1hdGlvbihvcHRpb25zPzogTWRiQW5pbWF0aW9uT3B0aW9ucyk6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSB7XG4gIG9wdGlvbnMgPSBnZXRPcHRpb25zKG9wdGlvbnMsIGJyb3dzZU91dFJpZ2h0T3B0aW9ucyk7XG5cbiAgcmV0dXJuIHRyaWdnZXIob3B0aW9ucy50cmlnZ2VyLCBbdHJhbnNpdGlvbignMCA9PiAxJywgW3VzZUFuaW1hdGlvbihicm93c2VPdXRSaWdodChvcHRpb25zKSldKV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJvd3NlT3V0UmlnaHRMZWF2ZUFuaW1hdGlvbihcbiAgb3B0aW9ucz86IE1kYkFuaW1hdGlvbk9wdGlvbnNcbik6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSB7XG4gIG9wdGlvbnMgPSBnZXRPcHRpb25zKG9wdGlvbnMsIGJyb3dzZU91dFJpZ2h0TGVhdmVPcHRpb25zKTtcblxuICByZXR1cm4gdHJpZ2dlcihvcHRpb25zLnRyaWdnZXIsIFt0cmFuc2l0aW9uKCc6bGVhdmUnLCBbdXNlQW5pbWF0aW9uKGJyb3dzZU91dFJpZ2h0KG9wdGlvbnMpKV0pXSk7XG59XG4iXX0=