import { animate, keyframes, style, transition, trigger, animation, useAnimation, } from '@angular/animations';
import { getOptions } from '../animations.utils';
const fadeOutLeftOptions = {
    trigger: 'fadeOutLeft',
    delay: 0,
    duration: 500,
};
const fadeOutLeftLeaveOptions = {
    trigger: 'fadeOutLeftLeave',
    delay: 0,
    duration: 500,
};
const fadeOutLeft = (options) => {
    const params = {
        delay: options.delay,
        duration: options.duration,
    };
    return animation([
        animate('{{duration}}ms {{delay}}ms', keyframes([
            style({ opacity: 1, transform: 'translate3d(0, 0, 0)', easing: 'ease', offset: 0 }),
            style({ opacity: 0, transform: 'translate3d(-100%, 0, 0)', easing: 'ease', offset: 1 }),
        ])),
    ], { params });
};
export function fadeOutLeftAnimation(options) {
    options = getOptions(options, fadeOutLeftOptions);
    return trigger(options.trigger, [transition('0 => 1', [useAnimation(fadeOutLeft(options))])]);
}
export function fadeOutLeftLeaveAnimation(options) {
    options = getOptions(options, fadeOutLeftLeaveOptions);
    return trigger(options.trigger, [transition(':leave', [useAnimation(fadeOutLeft(options))])]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFkZS1vdXQtbGVmdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL21kYi1hbmd1bGFyLXVpLWtpdC9hbmltYXRpb25zL2ZhZGUvZmFkZS1vdXQtbGVmdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsT0FBTyxFQUVQLFNBQVMsRUFDVCxLQUFLLEVBQ0wsVUFBVSxFQUNWLE9BQU8sRUFDUCxTQUFTLEVBQ1QsWUFBWSxHQUViLE1BQU0scUJBQXFCLENBQUM7QUFFN0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWpELE1BQU0sa0JBQWtCLEdBQXdCO0lBQzlDLE9BQU8sRUFBRSxhQUFhO0lBQ3RCLEtBQUssRUFBRSxDQUFDO0lBQ1IsUUFBUSxFQUFFLEdBQUc7Q0FDZCxDQUFDO0FBRUYsTUFBTSx1QkFBdUIsR0FBd0I7SUFDbkQsT0FBTyxFQUFFLGtCQUFrQjtJQUMzQixLQUFLLEVBQUUsQ0FBQztJQUNSLFFBQVEsRUFBRSxHQUFHO0NBQ2QsQ0FBQztBQUVGLE1BQU0sV0FBVyxHQUFHLENBQUMsT0FBNEIsRUFBOEIsRUFBRTtJQUMvRSxNQUFNLE1BQU0sR0FBRztRQUNiLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztRQUNwQixRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7S0FDM0IsQ0FBQztJQUVGLE9BQU8sU0FBUyxDQUNkO1FBQ0UsT0FBTyxDQUNMLDRCQUE0QixFQUM1QixTQUFTLENBQUM7WUFDUixLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNuRixLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztTQUN4RixDQUFDLENBQ0g7S0FDRixFQUNELEVBQUUsTUFBTSxFQUFFLENBQ1gsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxPQUE2QjtJQUNoRSxPQUFPLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBRWxELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEcsQ0FBQztBQUVELE1BQU0sVUFBVSx5QkFBeUIsQ0FBQyxPQUE2QjtJQUNyRSxPQUFPLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO0lBRXZELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGFuaW1hdGUsXG4gIEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSxcbiAga2V5ZnJhbWVzLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvbixcbiAgdHJpZ2dlcixcbiAgYW5pbWF0aW9uLFxuICB1c2VBbmltYXRpb24sXG4gIEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhLFxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IE1kYkFuaW1hdGlvbk9wdGlvbnMgfSBmcm9tICcuLi9hbmltYXRpb24ub3B0aW9ucyc7XG5pbXBvcnQgeyBnZXRPcHRpb25zIH0gZnJvbSAnLi4vYW5pbWF0aW9ucy51dGlscyc7XG5cbmNvbnN0IGZhZGVPdXRMZWZ0T3B0aW9uczogTWRiQW5pbWF0aW9uT3B0aW9ucyA9IHtcbiAgdHJpZ2dlcjogJ2ZhZGVPdXRMZWZ0JyxcbiAgZGVsYXk6IDAsXG4gIGR1cmF0aW9uOiA1MDAsXG59O1xuXG5jb25zdCBmYWRlT3V0TGVmdExlYXZlT3B0aW9uczogTWRiQW5pbWF0aW9uT3B0aW9ucyA9IHtcbiAgdHJpZ2dlcjogJ2ZhZGVPdXRMZWZ0TGVhdmUnLFxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDUwMCxcbn07XG5cbmNvbnN0IGZhZGVPdXRMZWZ0ID0gKG9wdGlvbnM6IE1kYkFuaW1hdGlvbk9wdGlvbnMpOiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSA9PiB7XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBkZWxheTogb3B0aW9ucy5kZWxheSxcbiAgICBkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcbiAgfTtcblxuICByZXR1cm4gYW5pbWF0aW9uKFxuICAgIFtcbiAgICAgIGFuaW1hdGUoXG4gICAgICAgICd7e2R1cmF0aW9ufX1tcyB7e2RlbGF5fX1tcycsXG4gICAgICAgIGtleWZyYW1lcyhbXG4gICAgICAgICAgc3R5bGUoeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCAwLCAwKScsIGVhc2luZzogJ2Vhc2UnLCBvZmZzZXQ6IDAgfSksXG4gICAgICAgICAgc3R5bGUoeyBvcGFjaXR5OiAwLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgtMTAwJSwgMCwgMCknLCBlYXNpbmc6ICdlYXNlJywgb2Zmc2V0OiAxIH0pLFxuICAgICAgICBdKVxuICAgICAgKSxcbiAgICBdLFxuICAgIHsgcGFyYW1zIH1cbiAgKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBmYWRlT3V0TGVmdEFuaW1hdGlvbihvcHRpb25zPzogTWRiQW5pbWF0aW9uT3B0aW9ucyk6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSB7XG4gIG9wdGlvbnMgPSBnZXRPcHRpb25zKG9wdGlvbnMsIGZhZGVPdXRMZWZ0T3B0aW9ucyk7XG5cbiAgcmV0dXJuIHRyaWdnZXIob3B0aW9ucy50cmlnZ2VyLCBbdHJhbnNpdGlvbignMCA9PiAxJywgW3VzZUFuaW1hdGlvbihmYWRlT3V0TGVmdChvcHRpb25zKSldKV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmFkZU91dExlZnRMZWF2ZUFuaW1hdGlvbihvcHRpb25zPzogTWRiQW5pbWF0aW9uT3B0aW9ucyk6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSB7XG4gIG9wdGlvbnMgPSBnZXRPcHRpb25zKG9wdGlvbnMsIGZhZGVPdXRMZWZ0TGVhdmVPcHRpb25zKTtcblxuICByZXR1cm4gdHJpZ2dlcihvcHRpb25zLnRyaWdnZXIsIFt0cmFuc2l0aW9uKCc6bGVhdmUnLCBbdXNlQW5pbWF0aW9uKGZhZGVPdXRMZWZ0KG9wdGlvbnMpKV0pXSk7XG59XG4iXX0=