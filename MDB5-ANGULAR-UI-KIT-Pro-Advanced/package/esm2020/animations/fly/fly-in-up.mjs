import { animate, keyframes, style, transition, trigger, animation, useAnimation, } from '@angular/animations';
import { getOptions } from '../animations.utils';
const flyInUpOptions = {
    trigger: 'flyInUp',
    delay: 0,
    duration: 500,
};
const flyInUpEnterOptions = {
    trigger: 'flyInUpEnter',
    delay: 0,
    duration: 500,
};
const flyInUp = (options) => {
    const params = {
        delay: options.delay,
        duration: options.duration,
    };
    return animation([
        animate('{{duration}}ms {{delay}}ms', keyframes([
            style({
                opacity: 0,
                transform: 'translate3d(0, 1500px, 0)',
                easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)',
                offset: 0,
            }),
            style({
                opacity: 1,
                transform: 'translate3d(0, -20px, 0)',
                easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)',
                offset: 0.6,
            }),
            style({
                transform: 'transform: translate3d(0, 10px, 0)',
                easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)',
                offset: 0.75,
            }),
            style({
                transform: 'transform: translate3d(0, -5px, 0)',
                easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)',
                offset: 0.9,
            }),
            style({
                transform: 'transform: translate3d(0, 0, 0)',
                easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)',
                offset: 1,
            }),
        ])),
    ], { params });
};
export function flyInUpAnimation(options) {
    options = getOptions(options, flyInUpOptions);
    return trigger(options.trigger, [transition('0 => 1', [useAnimation(flyInUp(options))])]);
}
export function flyInUpEnterAnimation(options) {
    options = getOptions(options, flyInUpEnterOptions);
    return trigger(options.trigger, [transition(':enter', [useAnimation(flyInUp(options))])]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmx5LWluLXVwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbWRiLWFuZ3VsYXItdWkta2l0L2FuaW1hdGlvbnMvZmx5L2ZseS1pbi11cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsT0FBTyxFQUVQLFNBQVMsRUFDVCxLQUFLLEVBQ0wsVUFBVSxFQUNWLE9BQU8sRUFDUCxTQUFTLEVBQ1QsWUFBWSxHQUViLE1BQU0scUJBQXFCLENBQUM7QUFFN0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWpELE1BQU0sY0FBYyxHQUF3QjtJQUMxQyxPQUFPLEVBQUUsU0FBUztJQUNsQixLQUFLLEVBQUUsQ0FBQztJQUNSLFFBQVEsRUFBRSxHQUFHO0NBQ2QsQ0FBQztBQUVGLE1BQU0sbUJBQW1CLEdBQXdCO0lBQy9DLE9BQU8sRUFBRSxjQUFjO0lBQ3ZCLEtBQUssRUFBRSxDQUFDO0lBQ1IsUUFBUSxFQUFFLEdBQUc7Q0FDZCxDQUFDO0FBRUYsTUFBTSxPQUFPLEdBQUcsQ0FBQyxPQUE0QixFQUE4QixFQUFFO0lBQzNFLE1BQU0sTUFBTSxHQUFHO1FBQ2IsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO1FBQ3BCLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUTtLQUMzQixDQUFDO0lBRUYsT0FBTyxTQUFTLENBQ2Q7UUFDRSxPQUFPLENBQ0wsNEJBQTRCLEVBQzVCLFNBQVMsQ0FBQztZQUNSLEtBQUssQ0FBQztnQkFDSixPQUFPLEVBQUUsQ0FBQztnQkFDVixTQUFTLEVBQUUsMkJBQTJCO2dCQUN0QyxNQUFNLEVBQUUscUNBQXFDO2dCQUM3QyxNQUFNLEVBQUUsQ0FBQzthQUNWLENBQUM7WUFDRixLQUFLLENBQUM7Z0JBQ0osT0FBTyxFQUFFLENBQUM7Z0JBQ1YsU0FBUyxFQUFFLDBCQUEwQjtnQkFDckMsTUFBTSxFQUFFLHFDQUFxQztnQkFDN0MsTUFBTSxFQUFFLEdBQUc7YUFDWixDQUFDO1lBQ0YsS0FBSyxDQUFDO2dCQUNKLFNBQVMsRUFBRSxvQ0FBb0M7Z0JBQy9DLE1BQU0sRUFBRSxxQ0FBcUM7Z0JBQzdDLE1BQU0sRUFBRSxJQUFJO2FBQ2IsQ0FBQztZQUNGLEtBQUssQ0FBQztnQkFDSixTQUFTLEVBQUUsb0NBQW9DO2dCQUMvQyxNQUFNLEVBQUUscUNBQXFDO2dCQUM3QyxNQUFNLEVBQUUsR0FBRzthQUNaLENBQUM7WUFDRixLQUFLLENBQUM7Z0JBQ0osU0FBUyxFQUFFLGlDQUFpQztnQkFDNUMsTUFBTSxFQUFFLHFDQUFxQztnQkFDN0MsTUFBTSxFQUFFLENBQUM7YUFDVixDQUFDO1NBQ0gsQ0FBQyxDQUNIO0tBQ0YsRUFDRCxFQUFFLE1BQU0sRUFBRSxDQUNYLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLFVBQVUsZ0JBQWdCLENBQUMsT0FBNkI7SUFDNUQsT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFFOUMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM1RixDQUFDO0FBRUQsTUFBTSxVQUFVLHFCQUFxQixDQUFDLE9BQTZCO0lBQ2pFLE9BQU8sR0FBRyxVQUFVLENBQUMsT0FBTyxFQUFFLG1CQUFtQixDQUFDLENBQUM7SUFFbkQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM1RixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYW5pbWF0ZSxcbiAgQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhLFxuICBrZXlmcmFtZXMsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uLFxuICB0cmlnZ2VyLFxuICBhbmltYXRpb24sXG4gIHVzZUFuaW1hdGlvbixcbiAgQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEsXG59IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgTWRiQW5pbWF0aW9uT3B0aW9ucyB9IGZyb20gJy4uL2FuaW1hdGlvbi5vcHRpb25zJztcbmltcG9ydCB7IGdldE9wdGlvbnMgfSBmcm9tICcuLi9hbmltYXRpb25zLnV0aWxzJztcblxuY29uc3QgZmx5SW5VcE9wdGlvbnM6IE1kYkFuaW1hdGlvbk9wdGlvbnMgPSB7XG4gIHRyaWdnZXI6ICdmbHlJblVwJyxcbiAgZGVsYXk6IDAsXG4gIGR1cmF0aW9uOiA1MDAsXG59O1xuXG5jb25zdCBmbHlJblVwRW50ZXJPcHRpb25zOiBNZGJBbmltYXRpb25PcHRpb25zID0ge1xuICB0cmlnZ2VyOiAnZmx5SW5VcEVudGVyJyxcbiAgZGVsYXk6IDAsXG4gIGR1cmF0aW9uOiA1MDAsXG59O1xuXG5jb25zdCBmbHlJblVwID0gKG9wdGlvbnM6IE1kYkFuaW1hdGlvbk9wdGlvbnMpOiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSA9PiB7XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBkZWxheTogb3B0aW9ucy5kZWxheSxcbiAgICBkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcbiAgfTtcblxuICByZXR1cm4gYW5pbWF0aW9uKFxuICAgIFtcbiAgICAgIGFuaW1hdGUoXG4gICAgICAgICd7e2R1cmF0aW9ufX1tcyB7e2RlbGF5fX1tcycsXG4gICAgICAgIGtleWZyYW1lcyhbXG4gICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsIDE1MDBweCwgMCknLFxuICAgICAgICAgICAgZWFzaW5nOiAnY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSknLFxuICAgICAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCAtMjBweCwgMCknLFxuICAgICAgICAgICAgZWFzaW5nOiAnY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSknLFxuICAgICAgICAgICAgb2Zmc2V0OiAwLjYsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAxMHB4LCAwKScsXG4gICAgICAgICAgICBlYXNpbmc6ICdjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKScsXG4gICAgICAgICAgICBvZmZzZXQ6IDAuNzUsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtNXB4LCAwKScsXG4gICAgICAgICAgICBlYXNpbmc6ICdjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKScsXG4gICAgICAgICAgICBvZmZzZXQ6IDAuOSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApJyxcbiAgICAgICAgICAgIGVhc2luZzogJ2N1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpJyxcbiAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgXSlcbiAgICAgICksXG4gICAgXSxcbiAgICB7IHBhcmFtcyB9XG4gICk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZmx5SW5VcEFuaW1hdGlvbihvcHRpb25zPzogTWRiQW5pbWF0aW9uT3B0aW9ucyk6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSB7XG4gIG9wdGlvbnMgPSBnZXRPcHRpb25zKG9wdGlvbnMsIGZseUluVXBPcHRpb25zKTtcblxuICByZXR1cm4gdHJpZ2dlcihvcHRpb25zLnRyaWdnZXIsIFt0cmFuc2l0aW9uKCcwID0+IDEnLCBbdXNlQW5pbWF0aW9uKGZseUluVXAob3B0aW9ucykpXSldKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZseUluVXBFbnRlckFuaW1hdGlvbihvcHRpb25zPzogTWRiQW5pbWF0aW9uT3B0aW9ucyk6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSB7XG4gIG9wdGlvbnMgPSBnZXRPcHRpb25zKG9wdGlvbnMsIGZseUluVXBFbnRlck9wdGlvbnMpO1xuXG4gIHJldHVybiB0cmlnZ2VyKG9wdGlvbnMudHJpZ2dlciwgW3RyYW5zaXRpb24oJzplbnRlcicsIFt1c2VBbmltYXRpb24oZmx5SW5VcChvcHRpb25zKSldKV0pO1xufVxuIl19