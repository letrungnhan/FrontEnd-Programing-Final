import { ViewContainerRef, ElementRef, TemplateRef, EventEmitter, QueryList, AfterContentInit, OnDestroy, OnInit, ChangeDetectorRef, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs';
import { MdbOptionComponent } from 'mdb-angular-ui-kit/option';
import { NgControl, ControlValueAccessor, FormControl } from '@angular/forms';
import { MdbOptionGroupComponent } from 'mdb-angular-ui-kit/option';
import { MdbSelectAllOptionComponent } from './select-all-option';
import { Overlay, ViewportRuler } from '@angular/cdk/overlay';
import { BooleanInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export declare class MdbSelectComponent implements OnInit, OnDestroy, AfterContentInit, ControlValueAccessor {
    private _overlay;
    private _viewportRuler;
    private _vcr;
    private _cdRef;
    private _renderer;
    ngControl: NgControl;
    _input: ElementRef<HTMLInputElement>;
    _dropdownTemplate: TemplateRef<any>;
    dropdown: ElementRef;
    private _optionsWrapper;
    _customContent: ElementRef;
    _filterInput: ElementRef;
    selectAllOption: MdbSelectAllOptionComponent;
    options: QueryList<MdbOptionComponent>;
    optionGroups: QueryList<MdbOptionGroupComponent>;
    get autoSelect(): boolean;
    set autoSelect(value: boolean);
    private _autoSelect;
    get clearButton(): boolean;
    set clearButton(value: boolean);
    private _clearButton;
    clearButtonTabindex: number;
    get disabled(): boolean;
    set disabled(value: boolean);
    private _disabled;
    dropdownClass: string;
    displayedLabels: number;
    get highlightFirst(): boolean;
    set highlightFirst(value: boolean);
    private _highlightFirst;
    get multiple(): boolean;
    set multiple(value: boolean);
    private _multiple;
    notFoundMsg: string;
    get outline(): boolean;
    set outline(value: boolean);
    private _outline;
    optionsSelectedLabel: string;
    placeholder: string;
    tabindex: number;
    get required(): boolean;
    set required(value: boolean);
    private _required;
    get filter(): boolean;
    set filter(value: boolean);
    private _filter;
    filterPlaceholder: string;
    filterDebounce: number;
    ariaLabel: string;
    ariaLabelledby: string;
    get visibleOptions(): number;
    set visibleOptions(value: number);
    private _visibleOptions;
    get optionHeight(): any;
    set optionHeight(value: any);
    private _optionHeight;
    get dropdownHeight(): number;
    set dropdownHeight(value: number);
    protected _dropdownHeight: number;
    get value(): any;
    set value(newValue: any);
    private _value;
    get compareWith(): (o1: any, o2: any) => boolean;
    set compareWith(fn: (o1: any, o2: any) => boolean);
    sortComparator: (a: MdbOptionComponent, b: MdbOptionComponent, options: MdbOptionComponent[]) => number;
    readonly valueChange: EventEmitter<any>;
    opened: EventEmitter<any>;
    closed: EventEmitter<any>;
    selected: EventEmitter<MdbOptionComponent>;
    deselected: EventEmitter<MdbOptionComponent | MdbOptionComponent[]>;
    noOptionsFound: EventEmitter<string>;
    readonly stateChanges: Subject<void>;
    selectFilter: FormControl;
    get activeOption(): MdbOptionComponent | null;
    get selectionView(): string;
    get hasSelection(): boolean;
    get allChecked(): boolean;
    private _keyManager;
    private _overlayRef;
    private _portal;
    private _selectionModel;
    previousSelectedValues: any;
    private _destroy;
    _isOpen: boolean;
    _hasFocus: boolean;
    _labelActive: boolean;
    _showNoResultsMsg: boolean;
    private _selectAllChecked;
    private _compareWith;
    handleKeydown(event: any): void;
    get select(): boolean;
    get isFocused(): boolean;
    get isActive(): boolean;
    get isMultiselectable(): boolean;
    get hasPopup(): boolean;
    get isDisabled(): boolean;
    get isExpanded(): boolean;
    get role(): string;
    constructor(_overlay: Overlay, _viewportRuler: ViewportRuler, _vcr: ViewContainerRef, _cdRef: ChangeDetectorRef, _renderer: Renderer2, ngControl: NgControl);
    ngAfterContentInit(): void;
    private _initKeyManager;
    private _listenToOptionClick;
    private _listenToSelectAllClick;
    private _updateValue;
    private _handleOptionClick;
    private _handleSingleSelection;
    private _handleMultipleSelection;
    private _setSelection;
    private _showFilteredOptions;
    private _selectByValue;
    private _setInitialValue;
    onSelectAll(selectAlloption: MdbSelectAllOptionComponent): void;
    open(): void;
    private _sortValues;
    private _listenToOutSideClick;
    private _getOverlayPosition;
    private _getPositions;
    close(): void;
    toggle(): void;
    get hasSelected(): boolean;
    get input(): HTMLInputElement;
    get labelActive(): boolean;
    private _scrollToOption;
    private _getNumberOfGroupsBeforeOption;
    handleSelectionClear(event?: MouseEvent): void;
    private _handleOpenKeydown;
    private _handleClosedKeydown;
    handleOptionsWheel(event: any): void;
    private _focus;
    private _highlightFirstOption;
    onFocus(): void;
    onBlur(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private _destroyDropdown;
    private _onChange;
    private _onTouched;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    static ngAcceptInputType_clearButton: BooleanInput;
    static ngAcceptInputType_disabled: BooleanInput;
    static ngAcceptInputType_highlightFirst: BooleanInput;
    static ngAcceptInputType_multiple: BooleanInput;
    static ngAcceptInputType_outline: BooleanInput;
    static ngAcceptInputType_required: BooleanInput;
    static ngAcceptInputType_filter: BooleanInput;
    static ɵfac: i0.ɵɵFactoryDeclaration<MdbSelectComponent, [null, null, null, null, null, { optional: true; self: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MdbSelectComponent, "mdb-select", never, { "autoSelect": "autoSelect"; "clearButton": "clearButton"; "clearButtonTabindex": "clearButtonTabindex"; "disabled": "disabled"; "dropdownClass": "dropdownClass"; "displayedLabels": "displayedLabels"; "highlightFirst": "highlightFirst"; "multiple": "multiple"; "notFoundMsg": "notFoundMsg"; "outline": "outline"; "optionsSelectedLabel": "optionsSelectedLabel"; "placeholder": "placeholder"; "tabindex": "tabindex"; "required": "required"; "filter": "filter"; "filterPlaceholder": "filterPlaceholder"; "filterDebounce": "filterDebounce"; "ariaLabel": "aria-label"; "ariaLabelledby": "aria-labelledby"; "visibleOptions": "visibleOptions"; "optionHeight": "optionHeight"; "dropdownHeight": "dropdownHeight"; "value": "value"; "compareWith": "compareWith"; "sortComparator": "sortComparator"; }, { "valueChange": "valueChange"; "opened": "opened"; "closed": "closed"; "selected": "selected"; "deselected": "deselected"; "noOptionsFound": "noOptionsFound"; }, ["selectAllOption", "options", "optionGroups"], ["mdb-select-all-option", "mdb-option, mdb-option-group", ".select-custom-content"]>;
}
